/* Styles specific to the pairing of an input field and its label */
.sw-input {
  display: grid;
  align-items: center;
  gap: .25em;
  grid-template-columns: var(--label-width, fit-content(10em)) 1fr;

  &:has(input:readonly) {
    grid-template-columns: var(--label-width, fit-content(10em)) fit-content(2em);
  }

  &:not(:has(label)) {
    grid-template-columns: 1fr;
  }

  label {
    display: block;
  }
}

/* Toggle switch styles */
.sw-switch {

  display: flex;
  gap: .25em;
  align-items: center;

  background: rgba(0, 0, 0, 0.05);
  border: 1px solid var(--color-border-light-tertiary);
  border-radius: .25em;
  height: calc(var(--form-field-height) + 1px);
  width: fit-content;
  padding: 3px;

  &:not(:has(input:is(:disabled, :read-only))) {
    cursor: pointer;
  }

  input {
    display: none;
  }

  .container {
    display: flex;
    gap: .25em;
  }

  &:has(input:checked) .label--on,
  &:has(input:not(:checked)) .label--off {
    background-color: var(--switch-background-active, #000);
    color: var(--switch-text-active, #fff);
  }

  &:has(input:checked) .label--off,
  &:has(input:not(:checked)) .label--on {
    opacity: .6;
  }

  .label {
    border-radius: .25em;
    padding: 0 .25em;
  }
}

.sw-meter {
  display: flex;
  gap: .25em;
  align-items: center;

  input {
    --input-max-width: var(--meter-field-width, 2.5em);
  }

  .sw-meter__max {
    display: inline-block;
    width: var(--meter-field-width, 2.5em)
  }

  progress[value] {
    appearance: none;

    width: 100%;
    height: 1em;

    border: none;

    ::-webkit-progress-value {
      background-color: var(--meter-color);
    }
  }
}

:is(.sw-meter, .sw-input) {

  input {
    box-sizing: border-box;
    width: calc(100% - 2px);
    min-width: 2.5em;
    max-width: var(--input-max-width, auto);
    height: var(--form-field-height);
    padding: 1px 3px;
    margin: 0;
    color: var(--color-text-dark-primary);
    background: transparent;
    border: 1px solid transparent;
    border-radius: 3px;
    user-select: text;
    justify-self: end;
    text-align: inherit;

    &[readonly] {
      width: auto;
      min-width: auto;
    }

    &[disabled] {
      color: var(--color-text-dark-inactive);
    }

    &:not([readonly]):not([disabled]) {
      color: var(--color-text-dark-primary);
    }
  }
}

.sw-select {
  display: block;

  label {
    display: block;
  }
}

.sw-checkbox {
  display: flex;
  align-items: center;
}

/* Styles for adding a flourish to the above input types */
.flourished {

  font-size: 1em;

  --flourish-offset-x: 4px;
  --flourish-offset-y: -7px;

  display: grid;
  gap: 0;
  grid-template-columns: 1fr;
  grid-template-areas:
    "field"
    "label";

  label,
  .flourished-input {
    padding: 0 15px;
  }

  label {
    grid-area: label;
    font-size: .7em;
    font-weight: 600;
    text-transform: uppercase;
  }

  .flourished-input {
    grid-area: field;
    position: relative;

    &:before,
    &:after {
      content: url('assets/flourish.svg');
      /* Replace with the desired character or SVG data URI */
      position: absolute;
      bottom: var(--flourish-offset-y);
      /* Adjust the position to align with the bottom border */
      font-size: 1em;
      /* Scales with the font-size of the parent */
    }

    &:before {
      left: var(--flourish-offset-x);
    }

    &:after {
      right: var(--flourish-offset-x);
      transform: scaleX(-100%)
    }
  }

  :is(input, select) {

    border: none;
    border-bottom: 1px solid #000;
    /* Thin bottom border */
    font-size: 1em;
    padding: 0;
    height: auto;
    line-height: 1em;
    /* Use em to scale with container's font size */
    outline: none;
    /* Optional: Removes the default focus outline */
    background: transparent;
  }
}